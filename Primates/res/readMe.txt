Overview:* The Jungle Primate Sanctuary helps in the rehabilitation of abused primates.* They wanted to have a system which help them in managing their sanctuary in better way. * The sanctuary has two types of housing, isolation and sanctuary. Enclosure can house monkeys of the same species while isolation can house only one primate and mainly used for housing new primates or primates that need medical attention.* They wanted a system which will help them keep track of the primates that they have rescued, their location in the sanctuary, their demographic information and their favorite food.* This project has been designed in such a way that they are able to find the list of primates and their location, the different species and the location where they can be found. Not only that they will also be able to move the primates between the different housing locations or even help them find better home via their exchange program.* They will also be able to generate a shopping list so that they can the primates their favorite food.List of features. * Fetch Primates in the alphabetical order of their nameo The program allows to fetch the primates in the alphabetical order of their name and the location in which they are currently residing* Fetch Species in the alphabetical order of their name.o This feature allows the user to fetch the different species housed in the sanctuary and the list of locations where they are housed.* Fetch a given species and its locationo This feature allows the user to locate a particular species* Generate a shopping listo This feature allows the user to generate a list of favorite food of the primates and the corresponding quantity.* Add new primate to the sanctuary.o This allows the user to allocate an isolation cage to the new primate which arrives to the sanctuary if one is available* Move primate to the isolation:o This allows the user to move a primate to a specified isolation if the isolation is available* Move Primate to the enclosureo This allows the user to move the primate to a specified enclosure if the enclosure is empty or houses other primates of the same species.* Get the enclosure informationo This allows the user to fetch the information about the primates currently being housed in an enclosure.How To Run. * Extract the zip file* Open cmd/Terminal and go into the res/folder * The jar file is present here.* In the terminal type: java –jar Primates.jar.How to Use the ProgramAs this is not an interactive program, the user will not be able to give any input and see the corresponding output. So, a driver has been included which will help run some predefined cases and display the output in the terminal.  To run the program, follow the steps given in the How to Run.Description of Examples. * Primates have been added and then the alphabetic list has been displayed* Primates have deleted and then the alphabetic list has been displayed to show the deletion* Species wise Location list has been printed.* Location list for a specific list has been printed.* Information of the different isolation and enclosure has been displayed.* Information of Occupants of a specific enclosure has been displayed.* Primates have been moved and then the location of primates and species have been printed alphabetically.* Shopping list has been displayed.Design/Model Changes* The species of the primates have been changed from Enum to class to allow scalability and minimal code changes in the future.* An Abstract class has been introduced which is extended by species. This has been done to reduce code redundancy.* Some functions have been renamed to allow better readability and to convey more meaning when read* The Housing Interface, Enclosure and Isolation classes has been made package protected.  We want the user to manipulate only the primates i.e., to change their weight, age and size. We do not want user to have access to any other data.* MovePrimateToEnclosure and MovePrimateToIsolation have been replaced by a single function. It accepts primateid and houseID and moves the primate. Gives us more flexibility if we want to add a new type. Of housing.* TestCases for Enclosure and Isolation have been removed as they are package-privateAssumptions:1. All enclosures are of same size which is decided at the start of construction of the sanctuary.2. The size of the enclosures remains the same. The sanctuary does not increase or decrease the size the of the enclosures once they are created.3. The sanctuary can only add isolation/enclosure.4. When moving a primate to an enclosure we do not check if there is already an enclosure with a given species. We move it to the next available enclosure which may be empty or may have primates of same species. 5. If the user wants to move a primate from to an enclosure or an isolation, then the user must give the which housing.6. The names of the primates are unique. If the names are not equal the first primate will get overwritten.7. The user will have the knowledge of Primate name to operate the system.Limitation* The program is not interactive and does not have a well-defined user interface.* The program does not allow the user to store primates with same name. The name must be unique.* The resizing of the enclosures is not possible* User cannot add other primate types other than which has been defined in the problem statement.* The program does not support the data to be persistent in the memory* The user needs to fetch the names of the primates and housingid to perform the tasks in the system* If the user tries to add a primate with a name that already exists in the sanctuary it won’t be allowed.* Downsizing of the sanctuary is not supportedCitations* https://www.javatpoint.com/Comparable-interface-in-collection-framework* https://www.baeldung.com/java-hashmap-sort* https://www.geeksforgeeks.org/set-in-java/* https://www.geeksforgeeks.org/why-java-interfaces-cannot-have-constructor-but-abstract-classes-can-have/* https://www.baeldung.com/java-abstract-class